{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\GO IT\\\\test\\\\src\\\\components\\\\UserDashboard\\\\UserDashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImagesContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 40px;\n  gap: 20px;\n\n \n`;\n_c = ImagesContainer;\nconst Header = styled.div`\n  font-family: Merriweather;\n  font-size: 28px;\n  font-weight: 700;\n  margin-left: 55px;\n  color: rgba(178, 159, 126, 1);\n  padding: 10px;\n`;\n_c2 = Header;\nconst ImagePair = styled.div`\n  display: flex;\n  gap: 20px;\n  justify-content: center;\n`;\n_c3 = ImagePair;\nconst ImageWrapper = styled.div`\n  width: 45%;\n  display: flex;\n  justify-content: center;\n`;\n_c4 = ImageWrapper;\nconst Image = styled.img`\n  width: 100%;\n  border-radius: 5px;\n  object-fit: cover;\n  width: 630px;\n  height: 400px; \n\n\n`;\n_c5 = Image;\n\nfunction ImageGrid() {\n  _s();\n\n  const [images, setImages] = useState([]);\n  useEffect(() => {\n    // Загрузка ссылок на картинки с API\n    fetch('https://randomfox.ca/floof/').then(response => response.json()).then(data => {\n      // Создание 4 ссылок на картинки\n      const imageUrls = Array.from({\n        length: 4\n      }, (_, index) => ({\n        url: `https://randomfox.ca/images/${index + 1}.jpg`,\n        alt: `Fox Image ${index + 1}`\n      }));\n      setImages(imageUrls);\n    }).catch(error => {\n      console.error('Ошибка при загрузке изображений:', error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ImagesContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: \"Open deals\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImagePair, {\n      children: images.slice(0, 2).map((image, index) => /*#__PURE__*/_jsxDEV(ImageWrapper, {\n        children: /*#__PURE__*/_jsxDEV(Image, {\n          src: image.url,\n          alt: image.alt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImagePair, {\n      children: images.slice(2).map((image, index) => /*#__PURE__*/_jsxDEV(ImageWrapper, {\n        children: /*#__PURE__*/_jsxDEV(Image, {\n          src: image.url,\n          alt: image.alt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ImageGrid, \"ScKwoilS3xNJP1q5r1COmrAdDIM=\");\n\n_c6 = ImageGrid;\nexport default ImageGrid;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"ImagesContainer\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"ImagePair\");\n$RefreshReg$(_c4, \"ImageWrapper\");\n$RefreshReg$(_c5, \"Image\");\n$RefreshReg$(_c6, \"ImageGrid\");","map":{"version":3,"sources":["C:/Users/User/Desktop/GO IT/test/src/components/UserDashboard/UserDashboard.jsx"],"names":["React","useState","useEffect","styled","ImagesContainer","div","Header","ImagePair","ImageWrapper","Image","img","ImageGrid","images","setImages","fetch","then","response","json","data","imageUrls","Array","from","length","_","index","url","alt","catch","error","console","slice","map","image"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAEA,MAAMC,eAAe,GAAGD,MAAM,CAACE,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;KAAMD,e;AASN,MAAME,MAAM,GAAGH,MAAM,CAACE,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;MAAMC,M;AAWN,MAAMC,SAAS,GAAGJ,MAAM,CAACE,GAAI;AAC7B;AACA;AACA;AACA,CAJA;MAAME,S;AAMN,MAAMC,YAAY,GAAGL,MAAM,CAACE,GAAI;AAChC;AACA;AACA;AACA,CAJA;MAAMG,Y;AAMN,MAAMC,KAAK,GAAGN,MAAM,CAACO,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;MAAMD,K;;AAUN,SAASE,SAAT,GAAqB;AAAA;;AACnB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACAY,IAAAA,KAAK,CAAC,6BAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACd;AACA,YAAMC,SAAS,GAAGC,KAAK,CAACC,IAAN,CAAW;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAX,EAA0B,CAACC,CAAD,EAAIC,KAAJ,MAAe;AACzDC,QAAAA,GAAG,EAAG,+BAA8BD,KAAK,GAAG,CAAE,MADW;AAEzDE,QAAAA,GAAG,EAAG,aAAYF,KAAK,GAAG,CAAE;AAF6B,OAAf,CAA1B,CAAlB;AAIAX,MAAAA,SAAS,CAACM,SAAD,CAAT;AACD,KATH,EAUGQ,KAVH,CAUUC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACD,KAAR,CAAc,kCAAd,EAAkDA,KAAlD;AACD,KAZH;AAaD,GAfQ,EAeN,EAfM,CAAT;AAiBA,sBACE,QAAC,eAAD;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,SAAD;AAAA,gBACGhB,MAAM,CAACkB,KAAP,CAAa,CAAb,EAAgB,CAAhB,EAAmBC,GAAnB,CAAuB,CAACC,KAAD,EAAQR,KAAR,kBACtB,QAAC,YAAD;AAAA,+BACE,QAAC,KAAD;AAAO,UAAA,GAAG,EAAEQ,KAAK,CAACP,GAAlB;AAAuB,UAAA,GAAG,EAAEO,KAAK,CAACN;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF,SAAmBF,KAAnB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF,eASE,QAAC,SAAD;AAAA,gBACGZ,MAAM,CAACkB,KAAP,CAAa,CAAb,EAAgBC,GAAhB,CAAoB,CAACC,KAAD,EAAQR,KAAR,kBACnB,QAAC,YAAD;AAAA,+BACE,QAAC,KAAD;AAAO,UAAA,GAAG,EAAEQ,KAAK,CAACP,GAAlB;AAAuB,UAAA,GAAG,EAAEO,KAAK,CAACN;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF,SAAmBF,KAAnB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GAvCQb,S;;MAAAA,S;AAyCT,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ImagesContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 40px;\r\n  gap: 20px;\r\n\r\n \r\n`;\r\n\r\nconst Header = styled.div`\r\n  font-family: Merriweather;\r\n  font-size: 28px;\r\n  font-weight: 700;\r\n  margin-left: 55px;\r\n  color: rgba(178, 159, 126, 1);\r\n  padding: 10px;\r\n`;\r\n\r\n\r\n\r\nconst ImagePair = styled.div`\r\n  display: flex;\r\n  gap: 20px;\r\n  justify-content: center;\r\n`;\r\n\r\nconst ImageWrapper = styled.div`\r\n  width: 45%;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  width: 100%;\r\n  border-radius: 5px;\r\n  object-fit: cover;\r\n  width: 630px;\r\n  height: 400px; \r\n\r\n\r\n`;\r\n\r\nfunction ImageGrid() {\r\n  const [images, setImages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Загрузка ссылок на картинки с API\r\n    fetch('https://randomfox.ca/floof/')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Создание 4 ссылок на картинки\r\n        const imageUrls = Array.from({ length: 4 }, (_, index) => ({\r\n          url: `https://randomfox.ca/images/${index + 1}.jpg`,\r\n          alt: `Fox Image ${index + 1}`,\r\n        }));\r\n        setImages(imageUrls);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Ошибка при загрузке изображений:', error);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <ImagesContainer>\r\n      <Header>Open deals</Header>\r\n      <ImagePair>\r\n        {images.slice(0, 2).map((image, index) => (\r\n          <ImageWrapper key={index}>\r\n            <Image src={image.url} alt={image.alt} />\r\n          </ImageWrapper>\r\n        ))}\r\n      </ImagePair>\r\n      <ImagePair>\r\n        {images.slice(2).map((image, index) => (\r\n          <ImageWrapper key={index}>\r\n            <Image src={image.url} alt={image.alt} />\r\n          </ImageWrapper>\r\n        ))}\r\n      </ImagePair>\r\n    </ImagesContainer>\r\n  );\r\n}\r\n\r\nexport default ImageGrid;\r\n"]},"metadata":{},"sourceType":"module"}